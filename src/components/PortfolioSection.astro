---
import Title from "@/components/Title.astro";
import BlogPostCard from "@/components/BlogPostCard.astro";
import Description from "./Description.astro";
import type { Images, Button as IButton } from "@/interfaces/page";
import { Image } from "astro:assets";
import { Button } from "./ui/button";
import fetchApi from "@/lib/strapi";
import type { ArticleData } from "@/interfaces/article.interface";
import QueryString from "qs";
import { Card, CardContent, CardTitle } from "@/components/ui/card";
import { cn } from "@/lib/utils";
import { titleToSlug } from "@/lib/utils";

const projects = await fetchApi<ArticleData[]>({
  endpoint: "projects",
  wrappedByKey: "data",
  query: QueryString.stringify({
    populate: { category: true, image: true },
    pagination: {
      limit: 2,
    },
    sort: ["createdAt:desc"],
  }),
});

interface Props {
  title: string;
  description: string;
  images: Images;
  button: IButton;
}

const { title, description, button } = Astro.props;
---

<portfolio-section>
  <div
    id="portfolioSection"
    class="p-7 md:p-12 lg:px-12 border-1 border-black rounded-xl alphanone"
  >
    <CardContent>
      <div class="flex items-center justify-center lg:justify-between gap-12">
        <Title className="portfolioTitle text-[32px] lg:text-[40px] alphanone"
          >{title}</Title
        >
        <Description className="hidden w-full lg:flex portfolioDesc alphanone"
          >{description}</Description
        >
      </div>
      <div
        class="grid grid-cols-1 lg:grid-cols-2 gap-12 py-12 alphanone"
        id="portfolioCards"
      >
        {
          projects.map((project, i) => (
            <BlogPostCard
              isPortfolio={true}
              shadowColor={i == 0 ? "bg-cyan" : "bg-green"}
              imageUrl={project.attributes.image.data.attributes.url}
              imageAltTxt={
                project.attributes.image.data.attributes.alternativeText
              }
              imageHeight={project.attributes.image.data.attributes.width}
              imageWidth={project.attributes.image.data.attributes.height}
              title={project.attributes.title}
            />
          ))
        }
      </div>
      <div class="flex items-center justify-center">
        <a href={button.href}>
          <Button
            id="portfolioButton"
            className="alphanone"
            variant={button.variant}
            size={button.size}>{button.content}</Button
          >
        </a>
      </div>
    </CardContent>
  </div>
</portfolio-section>

<script>
  import gsap from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import { isMobileOrReducedMotion } from "@/lib/utils.ts";

  class PortfolioSection extends HTMLElement {
    constructor() {
      super();

      gsap.registerPlugin(ScrollTrigger);

      if (!isMobileOrReducedMotion()) {
        const portfolioSection = this.querySelector("#portfolioSection");
        const portfolioTitle = this.querySelector(".portfolioTitle");
        const portfolioDesc = this.querySelector(".portfolioDesc");
        const portfolioCards = this.querySelector("#portfolioCards");
        const portfolioButton = this.querySelector("#portfolioButton");

        let tl = gsap.timeline({
          scrollTrigger: {
            trigger: this,
            start: "top center",
            end: "top center",
          },
        });

        tl.from(portfolioSection, { y: "20%", autoAlpha: 0 })
          .to(portfolioSection, {
            y: 0,
            duration: 0.1,
            ease: "power4.in",
          })
          .from(portfolioTitle, { y: "20%", autoAlpha: 0 }, 0.2)
          .to(portfolioTitle, {
            y: 0,
            duration: 0.1,
            ease: "power4.in",
          })
          .from(portfolioDesc, { y: "20%", autoAlpha: 0 }, 0.3)
          .to(portfolioDesc, {
            y: 0,
            duration: 0.1,
            ease: "power4.in",
          })
          .from(portfolioCards, { y: "20%", autoAlpha: 0 }, 0.5)
          .to(portfolioCards, {
            y: 0,
            duration: 0.1,
            ease: "power4.in",
          })
          .from(portfolioButton, { y: "20%", autoAlpha: 0 }, 0.8)
          .to(portfolioButton, {
            y: 0,
            duration: 0.1,
            ease: "power4.in",
          });
      }
    }
  }

  customElements.define("portfolio-section", PortfolioSection);
</script>
