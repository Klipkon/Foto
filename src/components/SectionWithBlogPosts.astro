---
import fetchApi from "@/lib/strapi";
import Description from "./Description.astro";
import Title from "./Title.astro";
import type { ArticleData } from "@/interfaces/article.interface";
import QueryString from "qs";
import BlogPostCard from "./BlogPostCard.astro";
import type { Button as IButton } from "@/interfaces/page";
import { Button } from "./ui/button";

const articles = await fetchApi<ArticleData[]>({
  endpoint: "articles",
  wrappedByKey: "data",
  query: QueryString.stringify({
    populate: {
      category: true,
      image: true,
    },
    pagination: {
      limit: 3,
    },
    sort: ["createdAt:desc"],
  }),
});

function getCardShadow(i: number) {
  switch (i) {
    case 0:
      return "bg-orange";
    case 1:
      return "bg-fuchsia";
    case 2:
      return "bg-ocean-green";
  }
}

interface Props {
  title: string;
  description: string;
  button: IButton;
}

const { title, description, button } = Astro.props;
---

<blog-post-section>
  <div
    id="blogSection"
    class="w-full flex flex-col items-center justify-center gap-8 md:gap-12 py-52"
  >
    <Title className="text-center blogSectionTitle alphanone">{title}</Title>
    <Description className="text-center blogSectionDesc alphanone"
      >{description}</Description
    >
    <div
      id="cardsContainer"
      class="w-full sm:w-3/4 md:w-1/2 lg:w-full grid grid-cols-1 lg:grid-cols-3 gap-10 xl:gap-10"
    >
      {
        articles.map((article, i) => (
          <BlogPostCard
            className="card alphanone"
            shadowColor={getCardShadow(i)}
            title={article.attributes.title}
            imageUrl={article.attributes.image.data.attributes.url}
            imageWidth={article.attributes.image.data.attributes.width}
            imageHeight={article.attributes.image.data.attributes.height}
            imageAltTxt={
              article.attributes.image.data.attributes.alternativeText
            }
          />
        ))
      }
    </div>
    <div class="pt-5 md:pt-10">
      <a href={button.href}>
        <Button
          key={button.id}
          id="servicesButton"
          variant={button.variant}
          className="alphanone">{button.content}</Button
        >
      </a>
    </div>
  </div>
</blog-post-section>

<script>
  import gsap from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";
  import { isMobileOrReducedMotion } from "@/lib/utils.ts";

  class BlogPostSection extends HTMLElement {
    constructor() {
      super();

      gsap.registerPlugin(ScrollTrigger);

      if (!isMobileOrReducedMotion()) {
        const blogSectionTitle = this.querySelector(".blogSectionTitle");
        const blogSectionDesc = this.querySelector(".blogSectionDesc");
        const servicesButton = this.querySelector("#servicesButton");
        const cards = this.querySelectorAll(".card");

        let tl = gsap.timeline({
          scrollTrigger: {
            trigger: this,
            start: "top center",
            end: "top center",
          },
        });

        tl.from(blogSectionTitle, { y: "20%", autoAlpha: 0 })
          .to(blogSectionTitle, {
            y: 0,
            duration: 0.1,
            ease: "power4.in",
          })
          .from(blogSectionDesc, { y: "-20%", autoAlpha: 0 })
          .to(blogSectionDesc, {
            y: 0,
            duration: 0.1,
            ease: "power4.in",
          })
          .from(cards, { y: "20%", autoAlpha: 0, stagger: 0.2 })
          .to(
            cards,
            {
              y: 0,
              stagger: 0.2,
              duration: 0.4,
              ease: "power4.in",
            },
            0.5
          )
          .from(
            servicesButton,
            { y: "20%", autoAlpha: 0, transformOrigin: "bottom left" },
            0.6
          )
          .to(servicesButton, {
            y: 0,
            opacity: 1,
            duration: 0.1,
            ease: "power4.in",
          });
      }
    }
  }

  customElements.define("blog-post-section", BlogPostSection);
</script>
