---
import "@/styles/globals.css"
import type { ArticleData, CategoryData } from '@/interfaces/article.interface'
import Title from '@/components/Title.astro';
import Description from '@/components/Description.astro';
import { Button } from '@/components/ui/button';
import MainLayout from "@/layouts/MainLayout.astro";
import Pagination from "@/components/Pagination.astro";
import { titleToSlug } from "@/lib/utils";
import fetchApi from "@/lib/strapi";
import QueryString from "qs";
import type { Page } from "@/interfaces/page";
import BlogPostCard from "@/components/BlogPostCard.astro";

const blogPage = await fetchApi<Page[]>({
    endpoint: 'pages',
    wrappedByKey: 'data',
    query: QueryString.stringify({
        filters: {
            title: {
                $eq: 'Blog',
            },
        },
        populate: {
            components: {
                populate: {
                    articles: true
                }
            }
        }
    })
})

const categories = await fetchApi<CategoryData[]>({
    endpoint: 'categories',
    wrappedByKey: 'data'
})

interface Props {
    articles: ArticleData[];
    previousUrl?: string;
    nextUrl?: string;
    currentPage: number;
}

const {articles,  previousUrl, nextUrl, currentPage} = Astro.props;
const title = blogPage[0].attributes.components[0].title!;
const description = blogPage[0].attributes.components[0].description!;

const categoryUrl = () => {
    const params = Astro.params;
    return 'category' in params ? params.category : '';
}

const sortedCategories = categories.sort((a, b) => a.id > b.id ? 1 : -1);
---

<MainLayout title={blogPage[0].attributes.title}>
    <div class="flex flex-col items-start justify-center pb-14">
        <div class="flex flex-col lg:flex-row items-start justify-between gap-6">
            <div class="flex flex-col items-start justify-center gap-4 w-full lg:w-1/2">
            <Title>{title}</Title>
            <Description>{description}</Description> 
            </div>
            <div class="w-full lg:w-1/2 flex items-center justify-end">
            </div>
        </div>
    </div>
    <div class="flex flex-wrap items-center justify-start gap-5">
        {
            sortedCategories.map((category, i) => {
                const slug = (category.attributes.name == "Wszystko" ? '' : titleToSlug(category.attributes.name));

                return <a href={"/blog/" + slug}>
                    <Button size="sm" variant={slug == categoryUrl() ? 'default' : 'secondary'}>{category.attributes.name}</Button>
                </a>
            })
        }
    </div>
    <div id="cardsContainer" class="w-full grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-10 xl:gap-10 pt-14">
        {
            articles.map((article, i) => (
               <BlogPostCard title={article.attributes.title} categoryName={article.attributes.category.data.attributes.name} imageUrl={article.attributes.image.data.attributes.formats.thumbnail.url} imageWidth={article.attributes.image.data.attributes.formats.thumbnail.width} imageHeight={article.attributes.image.data.attributes.formats.thumbnail.height} /> 
            ))
        }
    </div>
    <Pagination previous={previousUrl} next={nextUrl} currentPage={currentPage} />
</MainLayout>

<script>
    import type { ArticleData } from "@/interfaces/article.interface";
    import { titleToSlug } from "@/lib/utils";
    import QueryString from "qs";

    const search = new URLSearchParams(window.location.search).get('search') || '';

    console.log(search)

    if (search) {
        const query = QueryString.stringify({
            filters: {
                title: {
                    $contains: search,
                },
            },
            populate: {
                category: true,
                image: true
            }
        })

        const url = new URL(`${import.meta.env.PUBLIC_STRAPI_URL}/api/articles?${query ?? ""}`);

        const res = await fetch(url.toString());
        const {data} = await res.json() as {data: ArticleData[]};
    
        console.log(data)

        document.querySelector('#cardsContainer')!.innerHTML = '';

        data.forEach(article => {
            document.querySelector('#cardsContainer')!.innerHTML += `
                <a href=${"/blog/" + titleToSlug(article.attributes.category.data.attributes.name) + '/' + titleToSlug(article.attributes.title)} class="group">
                    <div className="p-6 lg:p-8 border-none shadow-none bg-secondary h-full">
                        <div className="flex flex-col justify-beetwen items-start p-0 gap-5 md:gap-6">
                            <img class="w-full rounded-lg max-h-[302px]" src=${import.meta.env.PUBLIC_STRAPI_URL + article.attributes.image.data.attributes.formats.thumbnail.url} alt="" width=${article.attributes.image.data.attributes.formats.thumbnail.width} height=${article.attributes.image.data.attributes.formats.thumbnail.height} loading="eager" />
                            <h3 className="font-semibold text-lg sm:text-2xl">${article.attributes.title}</h3>
                        </div>
                    </div>
                </a>
            `
        })

    }




</script>